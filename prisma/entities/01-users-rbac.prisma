/// ========== USERS & RBAC ==========
model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String?   @unique
  passwordHash  String?   @map("password_hash")
  pinCodeHash   String?   @map("pin_code_hash")
  avatarUrl     String?   @map("avatar_url")
  status        String    @default("active")

  // relations
  userRoles     UserRole[]
  cashierShifts CashierShift[] @relation("UserCashierShifts")
  transactions  Transaction[]  @relation("UserTransactions")
  activityLogs  ActivityLog[]  @relation("UserActivityLogs")
  goodsReceipts GoodsReceipt[] @relation("UserGoodsReceipts")

  @@map("users")
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?

  // relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int @map("role_id")
  permissionId Int @map("permission_id")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Restrict)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Restrict)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id      Int  @id @default(autoincrement())
  userId  Int  @map("user_id")
  roleId  Int  @map("role_id")
  placeId Int? @map("place_id")

  user  User  @relation(fields: [userId], references: [id], onDelete: Restrict)
  role  Role  @relation(fields: [roleId], references: [id], onDelete: Restrict)
  place Place? @relation(fields: [placeId], references: [id], onDelete: SetNull)

  @@unique([userId, roleId, placeId])
  @@map("user_roles")
}

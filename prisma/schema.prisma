// ============================================================
// ⚠️ AUTO-GENERATED FILE — DO NOT EDIT MANUALLY
// Generated by prisma/build-schema.js
// ============================================================

// This file defines the Prisma generator and datasource configuration.
// Run `npm run prisma:build` to combine this configuration with the entity
// definitions located in `prisma/entities` into `prisma/schema.prisma`.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ===== 01-users-rbac.prisma =====
/// ========== USERS & RBAC ==========
model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String?   @unique
  passwordHash  String?   @map("password_hash")
  pinCodeHash   String?   @map("pin_code_hash")
  avatarUrl     String?   @map("avatar_url")
  status        String    @default("active")

  // relations
  userRoles     UserRole[]
  cashierShifts CashierShift[] @relation("UserCashierShifts")
  transactions  Transaction[]  @relation("UserTransactions")
  activityLogs  ActivityLog[]  @relation("UserActivityLogs")
  goodsReceipts GoodsReceipt[] @relation("UserGoodsReceipts")

  @@map("users")
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?

  // relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int @map("role_id")
  permissionId Int @map("permission_id")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Restrict)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Restrict)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id       Int  @id @default(autoincrement())
  userId   Int  @map("user_id")
  roleId   Int  @map("role_id")
  outletId Int? @map("outlet_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict)
  outlet Outlet? @relation(fields: [outletId], references: [id], onDelete: SetNull)

  @@unique([userId, roleId, outletId])
  @@map("user_roles")
}


// ===== 02-outlets-warehouses.prisma =====
/// ========== OUTLETS & WAREHOUSES ==========
model Outlet {
  id        Int     @id @default(autoincrement())
  name      String
  address   String?
  phone     String?
  isActive  Boolean @default(true) @map("is_active")

  // relations
  userRoles          UserRole[]
  cashierShifts      CashierShift[]
  menus              Menu[]
  tables             Table[]
  outletIngredients  OutletIngredient[]
  transactions       Transaction[] @relation("OutletTransactions")
  promotions         Promotion[]
  purchaseOrders     PurchaseOrder[]
  reportFiles        ReportFile[]
  deliveryIntegrations DeliveryIntegration[]
  stockAdjustments   StockAdjustment[]
  stockTransfersFrom StockTransfer[] @relation("StockTransferFrom")
  stockTransfersTo   StockTransfer[] @relation("StockTransferTo")
  wastes             Waste[]

  @@map("outlets")
}

model Warehouse {
  id       Int     @id @default(autoincrement())
  name     String
  type     String?
  isActive Boolean @default(true) @map("is_active")

  warehouseStocks WarehouseStock[]

  @@map("warehouses")
}

model WarehouseStock {
  id           Int     @id @default(autoincrement())
  warehouseId  Int     @map("warehouse_id")
  ingredientId Int     @map("ingredient_id")
  qty          Decimal @db.Decimal(12, 2) @default(0)

  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Restrict)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)

  @@unique([warehouseId, ingredientId])
  @@map("warehouse_stocks")
}


// ===== 03-cashier-shifts.prisma =====
/// ========== CASHIER SHIFTS ==========
model CashierShift {
  id             Int       @id @default(autoincrement())
  outletId       Int       @map("outlet_id")
  cashierId      Int       @map("cashier_id")
  openedAt       DateTime  @default(now()) @map("opened_at")
  closedAt       DateTime? @map("closed_at")
  openingBalance Decimal   @db.Decimal(12, 2) @default(0) @map("opening_balance")
  closingBalance Decimal?  @db.Decimal(12, 2) @map("closing_balance")
  systemBalance  Decimal?  @db.Decimal(12, 2) @map("system_balance")
  status         String    @default("open")

  outlet  Outlet @relation(fields: [outletId], references: [id], onDelete: Restrict)
  cashier User   @relation("UserCashierShifts", fields: [cashierId], references: [id], onDelete: Restrict)

  @@map("cashier_shifts")
}


// ===== 04-menus.prisma =====
/// ========== MENUS ==========
model Menu {
  id          Int      @id @default(autoincrement())
  outletId    Int?     @map("outlet_id")
  name        String
  category    String
  description String?
  isActive    Boolean  @default(true) @map("is_active")

  outlet Outlet? @relation(fields: [outletId], references: [id], onDelete: SetNull)
  variants MenuVariant[]
  prices   MenuPrice[]
  recipes  Recipe[]
  transactionItems TransactionItem[]
  promotionItems   PromotionItem[]

  @@map("menus")
}

model MenuVariant {
  id     Int @id @default(autoincrement())
  menuId Int @map("menu_id")
  name   String

  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)
  transactionItemVariants TransactionItemVariant[]

  @@map("menu_variants")
}

model MenuPrice {
  id        Int      @id @default(autoincrement())
  menuId    Int      @map("menu_id")
  price     Decimal  @db.Decimal(12, 2)
  validFrom DateTime @map("valid_from")

  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@map("menu_prices")
}


// ===== 05-units-ingredients.prisma =====
/// ========== UNITS & INGREDIENTS ==========
model Unit {
  id           Int    @id @default(autoincrement())
  name         String @unique
  abbreviation String @unique

  ingredients       Ingredient[]
  outletIngredients OutletIngredient[]

  @@map("units")
}

model OutletIngredient {
  id       Int     @id @default(autoincrement())
  outletId Int?    @map("outlet_id")
  name     String
  unitId   Int     @map("unit_id")
  stock    Decimal @db.Decimal(12, 2) @default(0)

  outlet Outlet? @relation(fields: [outletId], references: [id], onDelete: SetNull)
  unit   Unit    @relation(fields: [unitId], references: [id], onDelete: Restrict)

  @@map("outlet_ingredients")
}

model Ingredient {
  id    Int     @id @default(autoincrement())
  name  String
  unitId Int    @map("unit_id")
  cost  Decimal @db.Decimal(12, 2)

  unit               Unit              @relation(fields: [unitId], references: [id], onDelete: Restrict)
  recipes            Recipe[]
  warehouseStocks    WarehouseStock[]
  supplierProducts   SupplierProduct[]
  ingredientPackages IngredientPackage[]
  stockAdjustments   StockAdjustment[]
  stockTransfers     StockTransfer[]
  wastes             Waste[]

  @@map("ingredients")
}

model Recipe {
  id           Int     @id @default(autoincrement())
  menuId       Int     @map("menu_id")
  ingredientId Int     @map("ingredient_id")
  qty          Decimal @db.Decimal(12, 2)

  menu       Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)

  @@unique([menuId, ingredientId])
  @@map("recipes")
}


// ===== 06-payments.prisma =====
/// ========== PAYMENTS ==========
model PaymentMethod {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  isActive    Boolean @default(true) @map("is_active")

  transactions Transaction[]

  @@map("payment_methods")
}


// ===== 07-transactions.prisma =====
/// ========== TRANSACTIONS ==========
model Transaction {
  id              Int      @id @default(autoincrement())
  cashierId       Int      @map("cashier_id")
  outletId        Int      @map("outlet_id")
  tableId         Int?     @map("table_id")
  orderType       String?  @map("order_type")
  total           Decimal  @db.Decimal(12, 2)
  tax             Decimal? @db.Decimal(12, 2)
  discount        Decimal? @db.Decimal(12, 2)
  paymentMethodId Int?     @map("payment_method_id")
  createdAt       DateTime @default(now()) @map("created_at")

  cashier       User           @relation("UserTransactions", fields: [cashierId], references: [id], onDelete: Restrict)
  outlet        Outlet         @relation("OutletTransactions", fields: [outletId], references: [id], onDelete: Restrict)
  table         Table?         @relation(fields: [tableId], references: [id], onDelete: SetNull)
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id], onDelete: SetNull)

  items TransactionItem[]

  @@map("transactions")
}

model TransactionItem {
  id            Int     @id @default(autoincrement())
  transactionId Int     @map("transaction_id")
  menuId        Int     @map("menu_id")
  qty           Int
  price         Decimal @db.Decimal(12, 2)
  discount      Decimal? @db.Decimal(12, 2)

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  menu        Menu        @relation(fields: [menuId], references: [id], onDelete: Restrict)

  variants      TransactionItemVariant[]
  kitchenOrders KitchenOrder[]

  @@map("transaction_items")
}

model TransactionItemVariant {
  id                Int     @id @default(autoincrement())
  transactionItemId Int     @map("transaction_item_id")
  menuVariantId     Int     @map("menu_variant_id")
  extraPrice        Decimal @db.Decimal(12, 2) @default(0) @map("extra_price")

  transactionItem TransactionItem @relation(fields: [transactionItemId], references: [id], onDelete: Cascade)
  menuVariant     MenuVariant     @relation(fields: [menuVariantId], references: [id], onDelete: Restrict)

  @@unique([transactionItemId, menuVariantId])
  @@map("transaction_item_variants")
}


// ===== 08-tables.prisma =====
/// ========== TABLES (DINE-IN) ==========
model Table {
  id       Int    @id @default(autoincrement())
  outletId Int    @map("outlet_id")
  name     String
  status   String?

  outlet       Outlet       @relation(fields: [outletId], references: [id], onDelete: Restrict)
  transactions Transaction[]

  @@map("tables")
}


// ===== 09-kitchen.prisma =====
/// ========== KITCHEN ==========
model KitchenOrder {
  id                Int      @id @default(autoincrement())
  transactionItemId Int      @map("transaction_item_id")
  status            String   @default("waiting")
  startedAt         DateTime? @map("started_at")
  finishedAt        DateTime? @map("finished_at")
  note              String?

  transactionItem TransactionItem @relation(fields: [transactionItemId], references: [id], onDelete: Cascade)

  @@map("kitchen_orders")
}


// ===== 10-suppliers.prisma =====
/// ========== SUPPLIERS & PURCHASING ==========
model Supplier {
  id          Int     @id @default(autoincrement())
  name        String
  contactName String? @map("contact_name")
  phone       String?
  email       String?
  address     String?

  products       SupplierProduct[]
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model SupplierProduct {
  id           Int     @id @default(autoincrement())
  supplierId   Int     @map("supplier_id")
  ingredientId Int     @map("ingredient_id")
  packageId    Int     @map("package_id")
  qty          Decimal @db.Decimal(12, 2)
  price        Decimal @db.Decimal(12, 2)
  leadTime     Int?
  isActive     Boolean @default(true) @map("is_active")

  supplier   Supplier   @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
  package    Package    @relation(fields: [packageId], references: [id], onDelete: Restrict)

  @@unique([supplierId, ingredientId, packageId])
  @@map("supplier_products")
}

model PurchaseOrder {
  id         Int      @id @default(autoincrement())
  outletId   Int      @map("outlet_id")
  supplierId Int      @map("supplier_id")
  status     String   @default("draft")
  createdAt  DateTime @default(now()) @map("created_at")

  outlet   Outlet   @relation(fields: [outletId], references: [id], onDelete: Restrict)
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Restrict)

  items         PurchaseOrderItem[]
  goodsReceipts GoodsReceipt[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id                  Int     @id @default(autoincrement())
  purchaseOrderId     Int     @map("purchase_order_id")
  ingredientPackageId Int     @map("ingredient_package_id")
  qty                 Decimal @db.Decimal(12, 2)
  price               Decimal @db.Decimal(12, 2)

  purchaseOrder     PurchaseOrder     @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  ingredientPackage IngredientPackage @relation(fields: [ingredientPackageId], references: [id], onDelete: Restrict)

  @@map("purchase_order_items")
}


// ===== 11-packages.prisma =====
/// ========== PACKAGES & INGREDIENT_PACKAGES ==========
model Package {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String?

  supplierProducts   SupplierProduct[]
  ingredientPackages IngredientPackage[]

  @@map("packages")
}

model IngredientPackage {
  id           Int     @id @default(autoincrement())
  ingredientId Int     @map("ingredient_id")
  packageId    Int     @map("package_id")
  qty          Decimal @db.Decimal(12, 2)
  price        Decimal @db.Decimal(12, 2)

  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
  package    Package    @relation(fields: [packageId], references: [id], onDelete: Restrict)

  purchaseOrderItems PurchaseOrderItem[]
  goodsReceiptItems  GoodsReceiptItem[]

  @@unique([ingredientId, packageId])
  @@map("ingredient_packages")
}


// ===== 12-goods-receipt.prisma =====
/// ========== GOODS RECEIPT ==========
model GoodsReceipt {
  id             Int      @id @default(autoincrement())
  purchaseOrderId Int     @map("purchase_order_id")
  receivedBy     Int?     @map("received_by")
  receivedAt     DateTime @default(now()) @map("received_at")
  note           String?

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  receivedUser  User?         @relation("UserGoodsReceipts", fields: [receivedBy], references: [id], onDelete: SetNull)
  items         GoodsReceiptItem[]

  @@map("goods_receipts")
}

model GoodsReceiptItem {
  id                 Int     @id @default(autoincrement())
  goodsReceiptId     Int     @map("goods_receipt_id")
  ingredientPackageId Int    @map("ingredient_package_id")
  qtyReceived        Decimal @db.Decimal(12, 2) @map("qty_received")
  qtyDamaged         Decimal @db.Decimal(12, 2) @default(0) @map("qty_damaged")
  unitPrice          Decimal @db.Decimal(12, 2) @map("unit_price")
  remarks            String?

  goodsReceipt     GoodsReceipt     @relation(fields: [goodsReceiptId], references: [id], onDelete: Cascade)
  ingredientPackage IngredientPackage @relation(fields: [ingredientPackageId], references: [id], onDelete: Restrict)

  @@map("goods_receipt_items")
}


// ===== 13-stock-ops.prisma =====
/// ========== STOCK OPS ==========
model StockAdjustment {
  id          Int     @id @default(autoincrement())
  ingredientId Int   @map("ingredient_id")
  outletId    Int    @map("outlet_id")
  qtyDiff     Decimal @db.Decimal(12, 2) @map("qty_diff")
  reason      String?
  createdAt   DateTime @default(now()) @map("created_at")

  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
  outlet     Outlet     @relation(fields: [outletId], references: [id], onDelete: Restrict)

  @@map("stock_adjustments")
}

model StockTransfer {
  id           Int     @id @default(autoincrement())
  ingredientId Int     @map("ingredient_id")
  fromOutletId Int?    @map("from_outlet_id")
  toOutletId   Int?    @map("to_outlet_id")
  qty          Decimal @db.Decimal(12, 2)
  createdAt    DateTime @default(now()) @map("created_at")

  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
  fromOutlet Outlet?    @relation("StockTransferFrom", fields: [fromOutletId], references: [id], onDelete: SetNull)
  toOutlet   Outlet?    @relation("StockTransferTo", fields: [toOutletId], references: [id], onDelete: SetNull)

  @@map("stock_transfers")
}

model Waste {
  id          Int     @id @default(autoincrement())
  ingredientId Int   @map("ingredient_id")
  outletId    Int?   @map("outlet_id")
  qty         Decimal @db.Decimal(12, 2)
  reason      String?
  createdAt   DateTime @default(now()) @map("created_at")

  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
  outlet     Outlet?    @relation(fields: [outletId], references: [id], onDelete: SetNull)

  @@map("wastes")
}


// ===== 14-promotions.prisma =====
/// ========== PROMOTIONS ==========
model Promotion {
  id            Int      @id @default(autoincrement())
  outletId      Int?     @map("outlet_id")
  name          String
  type          String?
  discountType  String?  @map("discount_type")
  discountValue Decimal? @db.Decimal(12, 2) @map("discount_value")
  startAt       DateTime? @map("start_at")
  endAt         DateTime? @map("end_at")

  outlet Outlet? @relation(fields: [outletId], references: [id], onDelete: SetNull)

  rules PromotionRule[]
  items PromotionItem[]

  @@map("promotions")
}

model PromotionRule {
  id          Int    @id @default(autoincrement())
  promotionId Int    @map("promotion_id")
  ruleType    String? @map("rule_type")
  value       String?

  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@map("promotion_rules")
}

model PromotionItem {
  id          Int  @id @default(autoincrement())
  promotionId Int  @map("promotion_id")
  menuId      Int? @map("menu_id")

  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  menu      Menu?     @relation(fields: [menuId], references: [id], onDelete: SetNull)

  @@map("promotion_items")
}


// ===== 15-logs.prisma =====
/// ========== LOGS ==========
model ActivityLog {
  id         Int      @id @default(autoincrement())
  userId     Int?     @map("user_id")
  action     String
  entityType String?  @map("entity_type")
  entityId   Int?     @map("entity_id")
  contextJson Json?   @map("context_json") @db.JsonB
  createdAt  DateTime @default(now()) @map("created_at")

  user User? @relation("UserActivityLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

model SystemLog {
  id         Int      @id @default(autoincrement())
  level      String?
  message    String
  contextJson Json?   @map("context_json") @db.JsonB
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("system_logs")
}


// ===== 16-report-files.prisma =====
/// ========== REPORT FILES ==========
model ReportFile {
  id          Int      @id @default(autoincrement())
  reportType  String   @map("report_type")
  reportScope String   @map("report_scope")
  reportDate  DateTime? @map("report_date")
  outletId    Int?     @map("outlet_id")
  fileName    String   @map("file_name")
  filePath    String   @map("file_path")
  createdAt   DateTime @default(now()) @map("created_at")

  outlet Outlet? @relation(fields: [outletId], references: [id], onDelete: SetNull)

  @@map("report_files")
}


// ===== 17-delivery-integrations.prisma =====
/// ========== DELIVERY INTEGRATIONS ==========
model DeliveryIntegration {
  id           Int    @id @default(autoincrement())
  outletId     Int    @map("outlet_id")
  platformName String @map("platform_name")
  apiKey       String? @map("api_key")
  settingsJson Json?   @map("settings_json") @db.JsonB

  outlet Outlet @relation(fields: [outletId], references: [id], onDelete: Restrict)

  @@map("delivery_integrations")
}

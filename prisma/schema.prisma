// ============================================================
// ⚠️ AUTO-GENERATED FILE — DO NOT EDIT MANUALLY
// Generated by prisma/build-schema.js
// ============================================================

// This file defines the Prisma generator and datasource configuration.
// Run `npm run prisma:build` to combine this configuration with the entity
// definitions located in `prisma/entities` into `prisma/schema.prisma`.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ===== 01-users-rbac.prisma =====
/// ========== USERS & RBAC ==========
model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String?   @unique
  passwordHash  String?   @map("password_hash")
  pinCodeHash   String?   @map("pin_code_hash")
  avatarUrl     String?   @map("avatar_url")
  status        String    @default("active")

  // relations
  userRoles     UserRole[]
  cashierShifts CashierShift[] @relation("UserCashierShifts")
  transactions  Transaction[]  @relation("UserTransactions")
  activityLogs  ActivityLog[]  @relation("UserActivityLogs")
  goodsReceipts GoodsReceipt[] @relation("UserGoodsReceipts")

  @@map("users")
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?

  // relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int @map("role_id")
  permissionId Int @map("permission_id")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Restrict)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Restrict)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id      Int  @id @default(autoincrement())
  userId  Int  @map("user_id")
  roleId  Int  @map("role_id")
  placeId Int? @map("place_id")

  user  User  @relation(fields: [userId], references: [id], onDelete: Restrict)
  role  Role  @relation(fields: [roleId], references: [id], onDelete: Restrict)
  place Place? @relation(fields: [placeId], references: [id], onDelete: SetNull)

  @@unique([userId, roleId, placeId])
  @@map("user_roles")
}


// ===== 02-places.prisma =====
/// ========== PLACES ==========
model Place {
  id       Int     @id @default(autoincrement())
  name     String
  address  String?
  phone    String?
  logoPath String? @map("logo_path")
  type     String?
  isActive Boolean @default(true) @map("is_active")

  // relations
  userRoles            UserRole[]
  cashierShifts        CashierShift[]
  menus                Menu[]
  tables               Table[]
  placeStocks          PlaceStock[]
  transactions         Transaction[] @relation("PlaceTransactions")
  promotions           Promotion[]
  purchaseOrders       PurchaseOrder[]
  reportFiles          ReportFile[]
  deliveryIntegrations DeliveryIntegration[]
  stockTransfersFrom   StockTransfer[] @relation("StockTransferFrom")
  stockTransfersTo     StockTransfer[] @relation("StockTransferTo")
  wastes               Waste[]
  inventoryStockDaily  InventoryStockDaily[]

  @@map("places")
}

model PlaceStock {
  id           Int     @id @default(autoincrement())
  placeId      Int     @map("place_id")
  ingredientId Int     @map("ingredient_id")
  qty          Decimal @db.Decimal(12, 2) @default(0)
  unitId       Int     @map("unit_id")

  place      Place      @relation(fields: [placeId], references: [id], onDelete: Restrict)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
  unit       Unit       @relation(fields: [unitId], references: [id], onDelete: Restrict)

  @@unique([placeId, ingredientId, unitId])
  @@map("place_stocks")
}


// ===== 03-cashier-shifts.prisma =====
/// ========== CASHIER SHIFTS ==========
model CashierShift {
  id             Int       @id @default(autoincrement())
  placeId        Int       @map("place_id")
  cashierId      Int       @map("cashier_id")
  openedAt       DateTime  @default(now()) @map("opened_at")
  closedAt       DateTime? @map("closed_at")
  openingBalance Decimal   @db.Decimal(12, 2) @default(0) @map("opening_balance")
  closingBalance Decimal?  @db.Decimal(12, 2) @map("closing_balance")
  systemBalance  Decimal?  @db.Decimal(12, 2) @map("system_balance")
  ipAddress      String    @map("ip_address")
  status         String    @default("open")

  place   Place @relation(fields: [placeId], references: [id], onDelete: Restrict)
  cashier User  @relation("UserCashierShifts", fields: [cashierId], references: [id], onDelete: Restrict)

  @@map("cashier_shifts")
}


// ===== 04-menus.prisma =====
/// ========== MENUS ==========
model Menu {
  id          Int      @id @default(autoincrement())
  placeId     Int?     @map("place_id")
  name        String
  categoryId  Int?     @map("category_id")
  description String?
  isActive    Boolean  @default(true) @map("is_active")

  place     Place?    @relation(fields: [placeId], references: [id], onDelete: SetNull)
  category  Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  variants  MenuVariant[]
  prices    MenuPrice[]
  recipes   Recipe[]
  transactionItems TransactionItem[]

  @@map("menus")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  menus Menu[]

  @@map("categories")
}

model MenuVariant {
  id     Int @id @default(autoincrement())
  menuId Int @map("menu_id")
  name   String

  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)
  items MenuVariantItem[]
  transactionItemVariants TransactionItemVariant[]

  @@map("menu_variants")
}

model MenuPrice {
  id        Int      @id @default(autoincrement())
  menuId    Int      @map("menu_id")
  price     Decimal  @db.Decimal(12, 2)
  effectiveDate DateTime @map("effective_date") @db.Date

  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@map("menu_prices")
}

model MenuVariantItem {
  id             Int     @id @default(autoincrement())
  menuVariantId  Int     @map("menu_variant_id")
  name           String
  additionalPrice Decimal @db.Decimal(12, 2) @default(0) @map("additional_price")

  menuVariant MenuVariant @relation(fields: [menuVariantId], references: [id], onDelete: Cascade)

  @@map("menu_variant_items")
}


// ===== 05-units-ingredients.prisma =====
/// ========== UNITS & INGREDIENTS ==========
model Unit {
  id           Int    @id @default(autoincrement())
  name         String @unique
  abbreviation String @unique

  ingredients      Ingredient[]
  placeStocks      PlaceStock[]
  goodsReceiptItems GoodsReceiptItem[]

  @@map("units")
}

model Ingredient {
  id    Int     @id @default(autoincrement())
  name  String
  unitId Int    @map("unit_id")

  unit               Unit              @relation(fields: [unitId], references: [id], onDelete: Restrict)
  recipes            Recipe[]
  placeStocks        PlaceStock[]
  supplierProducts   SupplierProduct[]
  ingredientPackages IngredientPackage[]
  stockTransfers     StockTransfer[]
  wastes             Waste[]
  inventoryStockDaily InventoryStockDaily[]

  @@map("ingredients")
}

model Recipe {
  id           Int     @id @default(autoincrement())
  menuId       Int     @map("menu_id")
  ingredientId Int     @map("ingredient_id")
  qty          Decimal @db.Decimal(12, 2)

  menu       Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)

  @@unique([menuId, ingredientId])
  @@map("recipes")
}


// ===== 06-payments.prisma =====
/// ========== PAYMENTS ==========
model PaymentMethod {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  isActive    Boolean @default(true) @map("is_active")

  transactions Transaction[]

  @@map("payment_methods")
}


// ===== 07-transactions.prisma =====
/// ========== TRANSACTIONS ==========
model Transaction {
  id              Int      @id @default(autoincrement())
  cashierId       Int      @map("cashier_id")
  placeId         Int?     @map("place_id")
  tableId         Int?     @map("table_id")
  orderType       String?  @map("order_type")
  total           Decimal  @db.Decimal(12, 2)
  tax             Decimal? @db.Decimal(12, 2)
  discount        Decimal? @db.Decimal(12, 2)
  paymentMethodId Int?     @map("payment_method_id")
  createdAt       DateTime @default(now()) @map("created_at")

  cashier       User           @relation("UserTransactions", fields: [cashierId], references: [id], onDelete: Restrict)
  place         Place?         @relation("PlaceTransactions", fields: [placeId], references: [id], onDelete: SetNull)
  table         Table?         @relation(fields: [tableId], references: [id], onDelete: SetNull)
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id], onDelete: SetNull)

  items TransactionItem[]

  @@map("transactions")
}

model TransactionItem {
  id            Int     @id @default(autoincrement())
  transactionId Int     @map("transaction_id")
  menuId        Int     @map("menu_id")
  qty           Int
  price         Decimal @db.Decimal(12, 2)
  discount      Decimal? @db.Decimal(12, 2)

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  menu        Menu        @relation(fields: [menuId], references: [id], onDelete: Restrict)

  variants      TransactionItemVariant[]
  kitchenOrders KitchenOrder[]

  @@map("transaction_items")
}

model TransactionItemVariant {
  id                Int     @id @default(autoincrement())
  transactionItemId Int     @map("transaction_item_id")
  menuVariantId     Int     @map("menu_variant_id")
  extraPrice        Decimal @db.Decimal(12, 2) @default(0) @map("extra_price")

  transactionItem TransactionItem @relation(fields: [transactionItemId], references: [id], onDelete: Cascade)
  menuVariant     MenuVariant     @relation(fields: [menuVariantId], references: [id], onDelete: Restrict)

  @@unique([transactionItemId, menuVariantId])
  @@map("transaction_item_variants")
}


// ===== 08-tables.prisma =====
/// ========== TABLES (DINE-IN) ==========
model Table {
  id      Int    @id @default(autoincrement())
  placeId Int    @map("place_id")
  name    String
  status  String?

  place        Place        @relation(fields: [placeId], references: [id], onDelete: Restrict)
  transactions Transaction[]

  @@map("tables")
}


// ===== 09-kitchen.prisma =====
/// ========== KITCHEN ==========
model KitchenOrder {
  id                Int      @id @default(autoincrement())
  transactionItemId Int      @map("transaction_item_id")
  status            String   @default("waiting")
  startedAt         DateTime? @map("started_at")
  finishedAt        DateTime? @map("finished_at")
  note              String?

  transactionItem TransactionItem @relation(fields: [transactionItemId], references: [id], onDelete: Cascade)

  @@map("kitchen_orders")
}


// ===== 10-suppliers.prisma =====
/// ========== SUPPLIERS & PURCHASING ==========
model Supplier {
  id          Int     @id @default(autoincrement())
  name        String
  contactName String? @map("contact_name")
  phone       String?
  email       String?
  address     String?

  products       SupplierProduct[]
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model SupplierProduct {
  id           Int     @id @default(autoincrement())
  supplierId   Int     @map("supplier_id")
  ingredientId Int     @map("ingredient_id")
  packageId    Int     @map("package_id")
  qty          Decimal @db.Decimal(12, 2)
  price        Decimal @db.Decimal(12, 2)
  leadTime     Int?
  isActive     Boolean @default(true) @map("is_active")

  supplier   Supplier   @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
  package    Package    @relation(fields: [packageId], references: [id], onDelete: Restrict)

  @@unique([supplierId, ingredientId, packageId])
  @@map("supplier_products")
}

model PurchaseOrder {
  id         Int      @id @default(autoincrement())
  placeId    Int      @map("place_id")
  supplierId Int      @map("supplier_id")
  type       String? 
  note       String?
  status     String   @default("draft")
  createdAt  DateTime @default(now()) @map("created_at")

  place    Place    @relation(fields: [placeId], references: [id], onDelete: Restrict)
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Restrict)

  items         PurchaseOrderItem[]
  goodsReceipts GoodsReceipt[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id                  Int     @id @default(autoincrement())
  purchaseOrderId     Int     @map("purchase_order_id")
  ingredientPackageId Int     @map("ingredient_package_id")
  qty                 Decimal @db.Decimal(12, 2)
  price               Decimal @db.Decimal(12, 2)

  purchaseOrder     PurchaseOrder     @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  ingredientPackage IngredientPackage @relation(fields: [ingredientPackageId], references: [id], onDelete: Restrict)
  goodsReceiptItems GoodsReceiptItem[]

  @@map("purchase_order_items")
}


// ===== 11-packages.prisma =====
/// ========== PACKAGES & INGREDIENT_PACKAGES ==========
model Package {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String?

  supplierProducts   SupplierProduct[]
  ingredientPackages IngredientPackage[]

  @@map("packages")
}

model IngredientPackage {
  id           Int     @id @default(autoincrement())
  ingredientId Int     @map("ingredient_id")
  packageId    Int     @map("package_id")
  qty          Decimal @db.Decimal(12, 2)

  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
  package    Package    @relation(fields: [packageId], references: [id], onDelete: Restrict)

  purchaseOrderItems PurchaseOrderItem[]

  @@unique([ingredientId, packageId])
  @@map("ingredient_packages")
}


// ===== 12-goods-receipt.prisma =====
/// ========== GOODS RECEIPT ==========
model GoodsReceipt {
  id             Int      @id @default(autoincrement())
  purchaseOrderId Int     @map("purchase_order_id")
  receivedBy     Int?     @map("received_by")
  receivedAt     DateTime @default(now()) @map("received_at")
  note           String?

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  receivedUser  User?         @relation("UserGoodsReceipts", fields: [receivedBy], references: [id], onDelete: SetNull)
  items         GoodsReceiptItem[]

  @@map("goods_receipts")
}

model GoodsReceiptItem {
  id                 Int     @id @default(autoincrement())
  goodsReceiptId     Int     @map("goods_receipt_id")
  purchaseOrderItemId Int    @map("purchase_order_item_id")
  unitReceived       Decimal @db.Decimal(12, 2) @map("unit_received")
  unitDamaged        Decimal @db.Decimal(12, 2) @default(0) @map("unit_damaged")
  unitId             Int     @map("unit_id")
  remarks            String?

  goodsReceipt     GoodsReceipt     @relation(fields: [goodsReceiptId], references: [id], onDelete: Cascade)
  purchaseOrderItem PurchaseOrderItem @relation(fields: [purchaseOrderItemId], references: [id], onDelete: Restrict)
  unit              Unit              @relation(fields: [unitId], references: [id], onDelete: Restrict)

  @@map("goods_receipt_items")
}


// ===== 13-stock-ops.prisma =====
/// ========== STOCK OPS ==========
model StockTransfer {
  id           Int     @id @default(autoincrement())
  ingredientId Int     @map("ingredient_id")
  fromPlaceId Int?    @map("from_place_id")
  toPlaceId   Int?    @map("to_place_id")
  qty          Decimal @db.Decimal(12, 2)
  createdAt    DateTime @default(now()) @map("created_at")

  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
  fromPlace  Place?    @relation("StockTransferFrom", fields: [fromPlaceId], references: [id], onDelete: SetNull)
  toPlace    Place?    @relation("StockTransferTo", fields: [toPlaceId], references: [id], onDelete: SetNull)

  @@map("stock_transfers")
}

model Waste {
  id          Int     @id @default(autoincrement())
  ingredientId Int   @map("ingredient_id")
  placeId    Int?   @map("place_id")
  qty         Decimal @db.Decimal(12, 2)
  reason      String?
  createdAt   DateTime @default(now()) @map("created_at")

  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
  place     Place?    @relation(fields: [placeId], references: [id], onDelete: SetNull)

  @@map("wastes")
}

model InventoryStockDaily {
  id           Int     @id @default(autoincrement())
  placeId      Int     @map("place_id")
  ingredientId Int     @map("ingredient_id")
  date         DateTime @db.Date
  openingQty   Decimal  @db.Decimal(12, 2) @default(0) @map("opening_qty")
  closingQty   Decimal  @db.Decimal(12, 2) @default(0) @map("closing_qty")
  diffQty      Decimal? @db.Decimal(12, 2) @map("diff_qty")
  createdAt    DateTime @default(now()) @map("created_at")

  place      Place      @relation(fields: [placeId], references: [id], onDelete: Restrict)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)

  @@unique([placeId, ingredientId, date])
  @@map("inventory_stock_daily")
}


// ===== 14-promotions.prisma =====
/// ========== PROMOTIONS ==========
model Promotion {
  id            Int      @id @default(autoincrement())
  placeId       Int?     @map("place_id")
  name          String
  startAt       DateTime? @map("start_at")
  endAt         DateTime? @map("end_at")

  place Place? @relation(fields: [placeId], references: [id], onDelete: SetNull)

  rules PromotionRule[]

  @@map("promotions")
}

model PromotionRule {
  id          Int    @id @default(autoincrement())
  promotionId Int    @map("promotion_id")
  ruleType    String? @map("rule_type")
  value       String?

  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@map("promotion_rules")
}


// ===== 15-logs.prisma =====
/// ========== LOGS ==========
model ActivityLog {
  id         Int      @id @default(autoincrement())
  userId     Int?     @map("user_id")
  action     String
  entityType String?  @map("entity_type")
  entityId   Int?     @map("entity_id")
  contextJson Json?   @map("context_json") @db.JsonB
  createdAt  DateTime @default(now()) @map("created_at")

  user User? @relation("UserActivityLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

model SystemLog {
  id         Int      @id @default(autoincrement())
  level      String?
  message    String
  contextJson Json?   @map("context_json") @db.JsonB
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("system_logs")
}


// ===== 16-report-files.prisma =====
/// ========== REPORT FILES ==========
model ReportFile {
  id          Int      @id @default(autoincrement())
  reportType  String   @map("report_type")
  reportScope String   @map("report_scope")
  reportDate  DateTime? @map("report_date")
  placeId     Int?     @map("place_id")
  fileName    String   @map("file_name")
  filePath    String   @map("file_path")
  createdAt   DateTime @default(now()) @map("created_at")

  place Place? @relation(fields: [placeId], references: [id], onDelete: SetNull)

  @@map("report_files")
}


// ===== 17-delivery-integrations.prisma =====
/// ========== DELIVERY INTEGRATIONS ==========
model DeliveryIntegration {
  id           Int    @id @default(autoincrement())
  placeId      Int    @map("place_id")
  platformName String @map("platform_name")
  apiKey       String? @map("api_key")
  settingsJson Json?   @map("settings_json") @db.JsonB

  place Place @relation(fields: [placeId], references: [id], onDelete: Restrict)

  @@map("delivery_integrations")
}
